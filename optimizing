import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
from model import ONNGenerator
import matplotlib.pyplot as plt

# Гиперпараметры
batch_size = 64
input_size = (28, 28)
num_layers = 2
wavelength = 400E-9
distance = 0.1
num_epochs = 200  # Максимальное количество эпох
lr = 0.001
loss_threshold = 0.02  # Значение Loss, при котором остановится обучение

# Загрузка данных MNIST
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

train_data = datasets.MNIST(root='./data', train=True, download=True, transform=transform)
train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True)

# Инициализация модели и оптимизатора
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = ONNGenerator(input_size=input_size, num_layers=num_layers, wavelength=wavelength, distance=distance).to(device)

optimizer = optim.Adam(model.parameters(), lr=lr)
criterion = nn.BCEWithLogitsLoss()

epoch = 0  # Счётчик эпох
while True:
    epoch += 1
    model.train()
    running_loss = 0.0
    for images, _ in train_loader:
        images = images.to(device)

        # Генерируем комплексный входной шум
        z_real = torch.randn(images.size(0), 1, 28, 28).to(device)
        z_imag = torch.randn(images.size(0), 1, 28, 28).to(device)
        z = z_real + 1j * z_imag

        # Генерация изображений
        generated_images = model(z)

        # Преобразование изображений MNIST в амплитудную форму
        target_amplitude = torch.abs(images)

        # Потеря между реальными и сгенерированными изображениями
        loss = criterion(generated_images, target_amplitude)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        running_loss += loss.item()

    avg_loss = running_loss / len(train_loader)
    print(f"Epoch [{epoch}], Loss: {avg_loss:.4f}")

    # === Проверяем, достигли ли нужного Loss ===
    if avg_loss < loss_threshold:
        print(f"✅ Достигли порога Loss < {loss_threshold}, обучение завершено!")
        break

    # === Ограничение по числу эпох, чтобы избежать бесконечного цикла ===
    if epoch >= num_epochs:
        print(f"❌ Достигнуто максимальное количество эпох ({num_epochs}), остановка.")
        break
# === Финальное сохранение изображения ===
model.eval()
with torch.no_grad():
    z_real = torch.randn(1, 1, 28, 28).to(device)
    z_imag = torch.randn(1, 1, 28, 28).to(device)
    z = z_real + 1j * z_imag
    final_generated = model(z).cpu().squeeze()

plt.figure(figsize=(3, 3))
plt.imshow(final_generated, cmap='gray')
plt.title("Final Generated Image")
plt.axis('off')

# Сохраняем изображение
plt.savefig("final_generated_image.png")
print("✅ Финальное изображение сохранено как 'final_generated_image.png'.")
plt.show()
